/*
内联函数是一种编译器优化的手段，它的作用主要有以下几点：

提高函数调用的效率：函数的调用会引入一定的开销，包括参数传递、栈帧的建立和销毁等。使用内联函数可以将函数的代码直接嵌入到调用的地方，避免了函数调用的开销，从而提高了程序的执行效率。

减少函数体积：内联函数的代码会被直接插入到调用的地方，而不是通过跳转到函数体的地址执行。这样可以减少函数调用带来的代码体积，特别是对于一些简短的函数，可以有效减小程序的大小。

避免函数调用带来的副作用：某些函数可能会对全局变量或静态变量进行修改，而函数调用会导致这些变量的状态发生改变。使用内联函数可以避免这种副作用，因为函数的代码被直接插入到调用的地方，不会引入额外的状态变化。

需要注意的是，内联函数适用于函数体较短的情况，通常用于一些频繁调用的简单函数，如访问器（getter）、设置器（setter）等。对于复杂的函数，内联可能会导致代码体积增大，影响性能，因此并不是所有函数都适合内联。

使用内联函数时，需要在函数声明和定义前面加上 inline 关键字来标识该函数为内联函数。编译器会根据自身的规则和限制来判断是否将函数内联展开，所以并不是所有标记为 inline 的函数都会被内联展开。
*/
#include <iostream>
 
using namespace std;

inline int Max(int x, int y)
{
   return (x > y)? x : y;
}

// 程序的主函数
int main( )
{

   cout << "Max (20,10): " << Max(20,10) << endl;
   cout << "Max (0,200): " << Max(0,200) << endl;
   cout << "Max (100,1010): " << Max(100,1010) << endl;
   return 0;
}